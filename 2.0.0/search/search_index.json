{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FogLedger","text":"<p>The FogLedger is a plugin for Fogbed. It allows you to emulate a fog network with distributed ledgers.</p> <p>Currently, FogLedger has suport for Hyperledger Indy. It's a distributed ledger, purpose-built for decentralized identity. It provides tools, libraries, and reusable components for creating and using independent digital identities rooted on blockchains or other distributed ledgers so that they are interoperable across administrative domains, applications, and any other silo. Indy is interoperable with other blockchains or can be used standalone powering the decentralization of identity.</p> <p>With FogLedger you can create a network of nodes running Hyperledger Indy. A emulation can have multiple networks of nodes running different distributed ledgers. FogLedger is a plugin for Fogbed, so you can use all the features of Fogbed to emulate your fog network, such as in the Figure below.</p> <p>Future work includes support for other distributed ledgers, such as Hyperledger Fabric, Hyperledger Besu, IOTA Tangle.</p> <p>The project code is available at Github. </p> <p>Docker images are available at Docker Hub.</p>"},{"location":"quickstart/","title":"FogLedger","text":""},{"location":"quickstart/#1-install","title":"1. Install","text":"<p>Before installing Fogbed it is necessary to install some dependencies and Containernet, as shown in the steps below:</p>"},{"location":"quickstart/#1-install-containernet","title":"1. Install Containernet","text":"<pre><code>sudo apt-get install ansible\n</code></pre> <pre><code>git clone https://github.com/containernet/containernet.git\n</code></pre> <pre><code>sudo ansible-playbook -i \"localhost,\" -c local containernet/ansible/install.yml\n</code></pre>"},{"location":"quickstart/#2-install-fogbed","title":"2. Install Fogbed","text":"<pre><code>sudo pip install -U git+https://github.com/EsauM10/fogbed.git\n</code></pre>"},{"location":"quickstart/#3-install-fogledger","title":"3. Install FogLedger","text":"<pre><code>sudo pip install fogLedger\n</code></pre>"},{"location":"quickstart/#2-run-example","title":"2. Run example","text":"<pre><code>mkdir example\ncd example\n</code></pre>"},{"location":"quickstart/#1-download-example","title":"1. Download example","text":"<pre><code>wget https://raw.githubusercontent.com/larsid/FogLedger/main/examples/test-local-network.py\nwget https://github.com/larsid/FogLedger/blob/main/examples/tmp/trustees.csv -o ./tmp/trustees.csv\n</code></pre>"},{"location":"quickstart/#2-run-local-network","title":"2. Run local network","text":"<pre><code>sudo python3 test-local-network.py\n</code></pre>"},{"location":"indy/examples/test-distributed-network/","title":"Distributed Emulation","text":""},{"location":"indy/examples/test-distributed-network/#test-distributed-network","title":"Test distributed network","text":"<p>This example shows how to create a distributed network of Indy nodes.</p>"},{"location":"indy/examples/test-distributed-network/#define-trustees","title":"Define Trustees","text":"<p>See Test local network.</p>"},{"location":"indy/examples/test-distributed-network/#experiment-code","title":"Experiment code","text":"<p>The code below shows how to create a distributed network of Indy nodes. The network is created in three hosts, using Docker containers. The network is composed of 4 nodes, 3 trustees.</p> <ul> <li>Define the hostname or IP address of the hosts where the emulation will run;</li> </ul> <pre><code>from typing import List\nfrom fogbed import (FogbedDistributedExperiment, Worker\n)\n\nfrom fogledger.indy import (IndyBasic)\n\nif (__name__ == '__main__'):\n\n    exp = FogbedDistributedExperiment()\n    worker1 = exp.add_worker('HOST1')\n    worker2 = exp.add_worker('HOST2')\n    worker3 = exp.add_worker('HOST3')\n\n    fog = exp.add_virtual_instance('fog')\n\n    indyCloud = IndyBasic(exp=exp, trustees_path = 'PATH_TO_FILE_TRUSTEES.csv', config_nodes=[\n            {'name': 'node1'},\n            {'name': 'node2'},\n            {'name': 'node3'},\n            {'name': 'node4'},\n        ])\n\n    worker1.add(fog, reachable=True)\n\n    for i in range(len(indyCloud.ledgers)/2):\n        worker2.add(indyCloud.ledgers[2*i], reachable=True)\n        worker3.add(indyCloud.ledgers[2*i +1], reachable=True)\n\n    exp.add_tunnel(worker1, worker2)\n    exp.add_tunnel(worker1, worker3)\n    try:\n        exp.start()\n        indyCloud.start_network()\n    except Exception as ex:\n        print(ex)\n    finally:\n        exp.stop()\n\n</code></pre>"},{"location":"indy/examples/test-distributed-network/#save-the-experiment-code","title":"Save the experiment code","text":"<p>Save the code above in a file named <code>test-distributed-network.py</code>.</p>"},{"location":"indy/examples/test-distributed-network/#run-the-experiment","title":"Run the experiment","text":"<p>To run the experiment, you need to run the following command:</p> <pre><code>python3 test-distributed-network.py\n</code></pre>"},{"location":"indy/examples/test-local-network/","title":"Local Emulation","text":""},{"location":"indy/examples/test-local-network/#test-local-network","title":"Test local network","text":"<p>This example shows how to create a local network of Indy nodes.</p>"},{"location":"indy/examples/test-local-network/#define-trustees","title":"Define Trustees","text":"<p>First you need to create a file with the trustees information. The file must have the following format:</p> <pre><code>Trustee name,Trustee DID,Trustee verkey\nTrustee1,V4SGRU86Z58d6TV7PBUe6f,~CoRER63DVYnWZtK8uAzNbx\nTrustee2,LnXR1rPnncTPZvRdmJKhJQ,~RTBtVN3iwcFhbWZzohFTMi\nTrustee3,PNQm3CwyXbN5e39Rw3dXYx,~AHtGeRXtGjVfXALtXP9WiX\n</code></pre> <p>This example is for register clients that have a SEED defined as <code>000000000000000000000000TrusteeX</code>. The SEED is used to generate the DID and verkey. The file is used to create the trustees in the network. The file is passed to the <code>IndyBasic</code> class as <code>trustees_path</code> parameter.</p>"},{"location":"indy/examples/test-local-network/#experiment-code","title":"Experiment code","text":"<p>The code below shows how to create a local network of Indy nodes. The network is created in a single host, using Docker containers. The network is composed of 4 nodes, 3 trustees. The trustees are the nodes that validate the transactions. </p> <ul> <li>You need to create a file with the trustees information;</li> <li>Define the hostname or IP address of the host where the emulation will run;</li> </ul> <pre><code>\n\n\nfrom fogbed import (\n    setLogLevel, FogbedDistributedExperiment\n)\n\nfrom fogledger.indy import (IndyBasic)\nsetLogLevel('info')\n\nif (__name__ == '__main__'):\n\n    exp = FogbedDistributedExperiment()\n\n    # Define Indy network in cloud\n    indyCloud = IndyBasic(\n        exp=exp, trustees_path='PATH_TO_FILE_TRUSTEES.csv', config_nodes=[\n            {'name': 'node1'},\n            {'name': 'node2'},\n            {'name': 'node3'},\n            {'name': 'node4'},\n        ])\n\n    # Add worker for cli\n    workerServer = exp.add_worker(f'HOSTNAME_OR_IP_ADDRESS')\n    for i in range(len(indyCloud.ledgers)):\n        workerServer.add(indyCloud.ledgers[i], reachable=True)\n\n    try:\n        exp.start()\n        indyCloud.start_network()\n        input('Press any key...')\n    except Exception as ex:\n        print(ex)\n    finally:\n        exp.stop()\n</code></pre>"},{"location":"indy/examples/test-local-network/#save-the-experiment-code","title":"Save the experiment code","text":"<p>Save the code above in a file named <code>test-local-network.py</code>.</p>"},{"location":"indy/examples/test-local-network/#run-the-experiment","title":"Run the experiment","text":"<p>To run the experiment, you need to run the following command:</p> <pre><code>python3 test-local-network.py\n</code></pre>"},{"location":"indy/examples/test-local-webserver-network/","title":"Using Webserver","text":""},{"location":"indy/examples/test-local-webserver-network/#test-local-network","title":"Test local network","text":"<p>This example shows how to create a local network of Indy nodes.</p>"},{"location":"indy/examples/test-local-webserver-network/#define-trustees","title":"Define Trustees","text":"<p>See Test local network.</p>"},{"location":"indy/examples/test-local-webserver-network/#experiment-code","title":"Experiment code","text":"<p>The code below shows how to create a local network of Indy nodes. The network is created in a single host, using Docker containers. The network is composed of 4 nodes, 3 trustees. The trustees are the nodes that validate the transactions. </p> <ul> <li>You need to create a file with the trustees information;</li> <li>Define the hostname or IP address of the host where the emulation will run;</li> </ul> <pre><code>from typing import List\nfrom fogbed import (\n    Container, VirtualInstance,\n    setLogLevel, FogbedDistributedExperiment, Worker\n)\nimport time\n\nfrom fogledger.indy import (IndyBasic)\nsetLogLevel('info')\n\n\ndef add_datacenters_to_worker(worker: Worker, datacenters: List[VirtualInstance]):\n    for device in datacenters:\n        worker.add(device, reachable=True)\n\n\nif (__name__ == '__main__'):\n\n    exp = FogbedDistributedExperiment()\n\n    # Webserver to check metrics\n    cloud = exp.add_virtual_instance('cloud')\n    instanceWebserver = exp.add_docker(\n        container=Container(\n            name='webserver',\n            dimage='larsid/fogbed-indy-webserver:v1.0.2-beta',\n            port_bindings={8000: 80, 6543: 6543},\n            ports=[8000, 6543],\n            environment={\n                'MAX_FETCH': 50000,\n                'RESYNC_TIME': 120,\n                'WEB_ANALYTICS': True,\n                'REGISTER_NEW_DIDS': True,\n                'LEDGER_INSTANCE_NAME': \"fogbed\",\n                'LEDGER_SEED': \"000000000000000000000000Trustee1\",\n                'GENESIS_FILE': \"/pool_transactions_genesis\"\n            },\n            volumes=[\n                f'tmp:/var/log/indy',\n            ]\n        ),\n        datacenter=cloud)\n\n    # ACA-PY to make requests to the ledger\n    exp.add_docker(\n        container=Container(\n            name='test',\n            dimage='mnplima/indy-test',\n        ),\n        datacenter=cloud\n    )\n\n    # Define Indy network in cloud\n    indyCloud = IndyBasic(\n        exp=exp, trustees_path='PATH_TO_FILE_TRUSTEES.csv', config_nodes=[\n            {'name': 'node1'},\n            {'name': 'node2'},\n            {'name': 'node3'},\n            {'name': 'node4'},\n        ])\n\n    # Add worker for cli\n    workerServer = exp.add_worker(f'HOSTNAME_OR_IP_ADDRESS')\n    workerServer.add(cloud, reachable=True)\n    for i in range(2, len(indyCloud.ledgers)+2):\n        workerServer.add(indyCloud.ledgers[i-2], reachable=True)\n\n    try:\n        exp.start()\n        indyCloud.start_network()\n        cloud.containers['webserver'].cmd(f\"echo '{indyCloud.genesis_content}' &gt; /pool_transactions_genesis\")\n        print('Starting Webserver')\n        time.sleep(10)\n        cloud.containers['webserver'].cmd('./scripts/start_webserver.sh &gt; output.log 2&gt;&amp;1 &amp;')\n\n\n        input('Press any key...')\n    except Exception as ex:\n        print(ex)\n    finally:\n        exp.stop()\n\n</code></pre>"},{"location":"indy/examples/test-local-webserver-network/#save-the-experiment-code","title":"Save the experiment code","text":"<p>Save the code above in a file named <code>test-local-webserver-network.py</code>.</p>"},{"location":"indy/examples/test-local-webserver-network/#run-the-experiment","title":"Run the experiment","text":"<p>To run the experiment, you need to run the following command:</p> <pre><code>python3 test-local-webserver-network.py\n</code></pre>"},{"location":"indy/examples/test-local-webserver-network/#check-the-results","title":"Check the results","text":"<p>The webserver is available at http://HOSTNAME_OR_IP_ADDRESS:80. It is provided by Von Network. Check more details at BCGOV/von-network</p> <p></p>"},{"location":"indy/resources/webserve/","title":"Webserver","text":""},{"location":"indy/resources/webserve/#webserver-von-network","title":"Webserver Von Network","text":""},{"location":"indy/resources/webserve/#introduction","title":"Introduction","text":"<p>This component allow to run a webserver of Von Network. It is based on BCGOV/von-network. It is a docker image that has a webserver useful to make requests to the ledger and to check the status of the nodes.</p>"},{"location":"indy/resources/webserve/#how-to-use","title":"How to use","text":"<p>To use this component, you need to add the following container to your experiment:</p> <pre><code>Container(\n    name='webserver',\n    dimage='larsid/fogbed-indy-webserver:v1.0.2-beta',\n    port_bindings={8000: 80, 6543: 6543},\n    ports=[8000, 6543],\n    environment={\n        'MAX_FETCH': 50000,\n        'RESYNC_TIME': 120,\n        'WEB_ANALYTICS': True,\n        'REGISTER_NEW_DIDS': True,\n        'LEDGER_INSTANCE_NAME': \"fogbed\",\n        'LEDGER_SEED': \"000000000000000000000000Trustee1\",\n        'GENESIS_FILE': \"/pool_transactions_genesis\"\n    }\n)\n</code></pre> <p>GENESIS_FILE: path to the genesis file. It is the file that contains the information of the ledger. It is generated by the IndyBasic component and you can pass it to the webserver.</p> <p>LEDGER_SEED: it is the SEED used to identify the ledger. You need to use the same SEED that you used to generate the DID and verkey in the <code>trustees_path</code>.</p> <p></p> <p>For more information about the parameters, please check the Von Network documentation</p>"}]}